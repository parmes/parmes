#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
In Solfec-1.0 contact points are generated from volumetric intersections of
 convex primitive shapes.
 For example, in case of finite elements, a single contact point is generated
 as a result of an intersection of two elements.
 Once an intersection is calculated, a contact point is obtained as a centroid
 of the intersection surface; a contact normal is calculated by averaging
 normal directions of the constituent surfaces.
 This is illustrated in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:conpnt"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/tomek/Dropbox/tkwork/codes/parmes/solfec/figures/conpnt.png
	lyxscale 50
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:conpnt"

\end_inset

Contact points and normals obtained from volumetric intersections of convex
 primitives.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Calculating volumetric intersection
\end_layout

\begin_layout Standard
Intersection of two convex polyhedra is a convex polyhedron.
 The convex intersection algorithm, based on 
\begin_inset CommandInset citation
LatexCommand cite
key "Muller"

\end_inset

, is implemented in cvi.c and it can be summarized as follows.
 Let vectors
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbf{v}=\left[\begin{array}{c}
\mathbf{v}_{1}\\
...\\
\mathbf{v}_{n}
\end{array}\right],\,\,\,\mathbf{p}=\left[\begin{array}{c}
\mathbf{p}_{1}\\
...\\
\mathbf{p}_{m}
\end{array}\right]
\]

\end_inset

store vertices and face planes of a polyhedron.
 Vertices are made of triplets of coordinates
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbf{v}_{i}=\left[\begin{array}{c}
v_{x}\\
v_{y}\\
v_{z}
\end{array}\right]_{i}
\]

\end_inset

Planes are made of four components
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbf{p}_{i}=\left[\begin{array}{c}
n_{x}\\
n_{y}\\
n_{z}\\
d
\end{array}\right]_{i}
\]

\end_inset

The plane equation reads
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
n_{x}\cdot x+n_{y}\cdot y+n_{z}\cdot z+d=0
\]

\end_inset

where 
\begin_inset Formula $\left[n_{x},n_{y},n_{z}\right]^{T}$
\end_inset

 can be interpreted as a direction normal to the plane.
 The convex intersection takes as input
\end_layout

\begin_layout LyX-Code
va - vertices of polyhedron 'a'
\end_layout

\begin_layout LyX-Code
pa - face planes of polyhedron 'a'
\end_layout

\begin_layout LyX-Code
vb, pb - vertices and planes of polyhedron 'b'
\end_layout

\begin_layout Standard
as seen in cvi.c:118.
 The algorithm begins by finding a distance between, and a pair closest
 points in 'a' and 'b'
\end_layout

\begin_layout LyX-Code
1  d,p,q = gjk(va, vb)
\end_layout

\begin_layout LyX-Code
2  if d > 0 return NULL
\end_layout

\begin_layout LyX-Code
3  else x = p
\end_layout

\begin_layout Standard
which maps to cvi.c:132.
 The GJK algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "GJK"

\end_inset

, implemented in gjk.c:342, is used.
 In case there is a positive separating distance between the input polyhedrons,
 null intersection is returned.
 For the intersection algorithm to work we need a point 
\begin_inset Formula $\mathbf{x}$
\end_inset

, that is inside of both input polyhedrons.
 GJK will at best return a common point on the surfaces of both polyhedra.
 In the next step
\end_layout

\begin_layout LyX-Code
4  x = refine_point(x)
\end_layout

\begin_layout Standard
point 
\begin_inset Formula $\mathbf{x}$
\end_inset

 is refined by pushing it deeper inside of polyhedrons 'a' and 'b'.
 This maps to cvi.c:136.
 Once 
\begin_inset Formula $\mathbf{x}$
\end_inset

 has been refined, we transform the input plane definitions
\end_layout

\begin_layout LyX-Code
5  transform(pa)
\end_layout

\begin_layout LyX-Code
6  transform(pb)
\end_layout

\begin_layout Standard
so that 
\begin_inset Formula $\mathbf{x}$
\end_inset

 acts as an origin of the coordinate system 
\begin_inset Formula $\left[0,0,0\right]^{T}$
\end_inset

.
 In the course of this transformation we also scale the normal direction
 components so that 
\begin_inset Formula $d_{i}=-1$
\end_inset

.
 This maps to cvi.c:143-159.
 In the next step
\end_layout

\begin_layout LyX-Code
7  h = quickhull(normals(pa+pb))
\end_layout

\begin_layout Standard
we calculate the convex hull of the transformed normal directions of 'a'
 and 'b' (cvi.c:163).
 The quickhull algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "Quickhull"

\end_inset

, implemented in hull.c:555, is used.
 The result can be interpreted as a 
\emph on
dual polyhedron
\emph default
 of the intersection polyhedron of 'a' and 'b': for a convex polyhedron
 
\begin_inset Formula $\left(\mathbf{v},\mathbf{p}\right)$
\end_inset

, its dual (or 
\emph on
polar
\emph default
) polyhedron is made by reinterpreting vertices as planes, and planes as
 vertices, as follows
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left[\begin{array}{c}
v_{x}\\
v_{y}\\
v_{z}
\end{array}\right]_{i}\rightarrow\left[\begin{array}{c}
v_{x}\\
v_{y}\\
v_{z}\\
-1
\end{array}\right]_{i},\,\,\,l_{v}=\sqrt{v_{x}^{2}+v_{y}^{2}+v_{z}^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left[\begin{array}{c}
n_{x}\\
n_{y}\\
n_{z}\\
-1
\end{array}\right]_{i}\rightarrow\left[\begin{array}{c}
n_{x}\\
n_{y}\\
n_{z}
\end{array}\right]_{i},\,\,\,l_{n}=\sqrt{n_{x}^{2}+n_{y}^{2}+n_{z}^{2}}
\]

\end_inset

where vertices at distance 
\begin_inset Formula $l_{v}$
\end_inset

 from the origin become planes at distance 
\begin_inset Formula $1/l_{v}$
\end_inset

 from the origin, while planes at distance 
\begin_inset Formula $1/l_{n}$
\end_inset

 from the origin become vertices at distance 
\begin_inset Formula $l_{n}$
\end_inset

.
 In order to obtain vertices of the intersection polyhedron we then calculate
 the polar set
\end_layout

\begin_layout LyX-Code
8  v = polarize(h)
\end_layout

\begin_layout Standard
which maps to cvi.c:164 and is implemented in tri.c:351.
 The vertices 
\begin_inset Formula $\mathbf{v}$
\end_inset

 of the dual intersection polyhedron are translated back, 
\begin_inset Formula $\mathbf{v}+\mathbf{x}$
\end_inset

, into the input coordinate system, and triangulated
\end_layout

\begin_layout LyX-Code
9  t = triangulate(v+x)
\end_layout

\begin_layout Standard
which maps to cvi.c:170-220.
 The triangulation is then returned
\end_layout

\begin_layout LyX-Code
10 return t
\end_layout

\begin_layout Standard
at cvi.v:231.
\end_layout

\begin_layout Section
Deriving contact points and normals
\end_layout

\begin_layout Standard
Contact points and contact normals are calculated based on the intersection
 surfaces obtained in the previous step.
 For various pairing of geometrical objects, calculation of contact points
 and contact normals is implemented in goc.c.
 For the pairing of two convex polyhedral surfaces contact detection is
 implemented in goc.c:detect_convex_convex, where fist at goc.c:272, triangulation
 of the intersection of the input surfaces is obtained, and next at goc.c:274
 a contact point and contact normal are obtained out of this triangulation.
 Implementation of this calculation is found at goc.c:130 and it can be summarize
d as follows.
 Let 
\begin_inset Formula $\partial A$
\end_inset

 and 
\begin_inset Formula $\partial B$
\end_inset

 be the surfaces of the input polytopes 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

.
 Let 
\begin_inset Formula $\left\{ t_{i}\right\} $
\end_inset

 and 
\begin_inset Formula $\left\{ \mathbf{v}_{i}\right\} $
\end_inset

 be the sets of triangles and vertices of the intersection surface of 
\begin_inset Formula $A\cap B$
\end_inset

.
 Then
\end_layout

\begin_layout LyX-Code
1  
\begin_inset Formula $\mathbf{p}=\mathbf{0}$
\end_inset

, 
\begin_inset Formula $\mathbf{n}=\mathbf{0}$
\end_inset

, 
\begin_inset Formula $area$
\end_inset

 = 0
\end_layout

\begin_layout LyX-Code
2  for each 
\begin_inset Formula $t_{i}\in\left\{ t_{i}\right\} $
\end_inset

 do
\end_layout

\begin_layout LyX-Code
3    
\begin_inset Formula $a$
\end_inset

 = area 
\begin_inset Formula $\left(t_{i}\right)$
\end_inset

, 
\begin_inset Formula $b$
\end_inset

 = 
\begin_inset Formula $a^{2}$
\end_inset


\end_layout

\begin_layout LyX-Code
4    if 
\begin_inset Formula $t_{i}\in\partial A$
\end_inset

 then 
\begin_inset Formula $\mathbf{n}=\mathbf{n}+b\cdot\text{normal}\left(t_{i}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
5    else 
\begin_inset Formula $\mathbf{n}=\mathbf{n}-b\cdot\text{normal}\left(t_{i}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
6    
\begin_inset Formula $\mathbf{p}=\mathbf{p}+a\cdot\text{centroid}\left(t_{i}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
7    
\begin_inset Formula $area=area+a$
\end_inset


\end_layout

\begin_layout LyX-Code
8  
\begin_inset Formula $\mathbf{p}=\mathbf{p}/area$
\end_inset

, 
\begin_inset Formula $\mathbf{n}=\mathbf{n}/\left\Vert \mathbf{n}\right\Vert $
\end_inset

, 
\begin_inset Formula $area=0.5\cdot area$
\end_inset


\end_layout

\begin_layout LyX-Code
9  if 
\begin_inset Formula $\mathbf{p}$
\end_inset

 outside of 
\begin_inset Formula $A$
\end_inset

 or 
\begin_inset Formula $B$
\end_inset

 return NULL
\end_layout

\begin_layout LyX-Code
10 
\begin_inset Formula $spair_{0}=\text{nearest\_surface\_id}\left(\mathbf{p},\partial A\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
11 
\begin_inset Formula $spair_{1}=\text{nearest\_surface\_id}\left(\mathbf{p},\partial B\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
12 
\begin_inset Formula $gap=\underset{\mathbf{v}_{i}\in\left\{ \mathbf{v}_{i}\right\} }{\min}\mathbf{n}\cdot\mathbf{v}_{i}-\underset{\mathbf{v}_{i}\in\left\{ \mathbf{v}_{i}\right\} }{\max}\mathbf{n}\cdot\mathbf{v}_{i}$
\end_inset


\end_layout

\begin_layout LyX-Code
13 if 
\begin_inset Formula $\left|gap\right|$
\end_inset

 seems too large
\end_layout

\begin_layout LyX-Code
14   
\begin_inset Formula $A^{\prime}=A+\mathbf{n}\cdot\left|gap\right|$
\end_inset

, 
\begin_inset Formula $B^{\prime}=B-\mathbf{n}\cdot\left|gap\right|$
\end_inset


\end_layout

\begin_layout LyX-Code
15   
\begin_inset Formula $gap=\min\left(\text{gjk}\left(A^{\prime},B^{\prime}\right)-2\left|gap\right|,0\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
16 return 
\begin_inset Formula $\mathbf{p}$
\end_inset

, 
\begin_inset Formula $\mathbf{n}$
\end_inset

, 
\begin_inset Formula $area$
\end_inset

, 
\begin_inset Formula $spair$
\end_inset

, 
\begin_inset Formula $gap$
\end_inset


\end_layout

\begin_layout Standard
Lines 1-8 above map to goc.c:141-158.
 Line 9 corresponds to goc.c:160.
 Lines 10-11 map to goc.c:163-172.
 Lines 12-15 map to goc.c:214-243.
 The extra check in line 13-15 is added to improve robustness of gap calculation.
 We note that, apart from the contact point, the contact normal, and the
 
\begin_inset Formula $gap$
\end_inset

, we also calculate contact 
\begin_inset Formula $area$
\end_inset

, and surface pairing 
\begin_inset Formula $spair$
\end_inset

, storing identifiers of the input surfaces that are nearest to the contact
 point.
 In line 4, accumulated normal directions are scaled by square area of triangles
, weighting down the influence of triangles with small areas.
 In line 9, we terminate in case the contact point fell outside of the input
 surfaces due to roundoff.
\end_layout

\begin_layout Section
Contact sparsification
\end_layout

\begin_layout Standard
Contact geometries made of many individual convex objects often generate
 many contact points.
 Some of these contact points are ill–conditioned, in the sense that their
 corresponding contact normals do not necessarily represent a most natural
 direction of contact resolution.
 This frequently happens near corners or sharp edges, due to roundoff error.
 Also, for contact problems among bodies represented by simple kinematic
 models (e.g.
 rigid or pseudo-rigid) complex geometries may give rise to the number of
 contact points far exceeding the available kinematic freedom.
 This renders the 
\begin_inset Formula $\mathbf{W}$
\end_inset

 matrix ill-conditioned, as already explained in :ref:`the section on local
 dynamics <solfec-1.0-theory-locdyn>`.
 For the above reasons, a heuristic method of refining contact points, or
 
\emph on
sparsification
\emph default
, has been implemented in dom.c:sparsify_contacts.
 The result of application of this routine is seen in :numref:`sparsification`.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/tomek/Dropbox/tkwork/codes/parmes/solfec/figures/sparsification.png
	lyxscale 50
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Heuristic filtering of redundant contact points (736 to 168).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The sparsification approach can be summarized as follows.
 Let 
\begin_inset Formula $\left\{ c_{i}\right\} $
\end_inset

 be a set of all contact points and let 
\begin_inset Formula $threshold$
\end_inset

, 
\begin_inset Formula $minarea$
\end_inset

 and 
\begin_inset Formula $mindist$
\end_inset

 be given.
 Then
\end_layout

\begin_layout LyX-Code
1  for all newly detected 
\begin_inset Formula $c_{i}\in\left\{ c_{i}\right\} $
\end_inset

 do
\end_layout

\begin_layout LyX-Code
2    if 
\begin_inset Formula $\text{area}\left(c_{i}\right)<minarea$
\end_inset

 then 
\begin_inset Formula $\text{delete}\left(c_{i}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
3    for all 
\begin_inset Formula $c_{j}\in\text{adjacency}\left(c_{i}\right)$
\end_inset

 do
\end_layout

\begin_layout LyX-Code
4      if 
\begin_inset Formula $\text{area}\left(c_{i}\right)<threshold\cdot\text{area}\left(c_{j}\right)$
\end_inset

 and
\end_layout

\begin_layout LyX-Code
          
\begin_inset Formula $c_{i}\text{ and }c_{j}\text{ are topologically adjacent}$
\end_inset

 then 
\begin_inset Formula $\text{delete}\left(c_{i}\right)$
\end_inset


\end_layout

\begin_layout LyX-Code
5      else if 
\begin_inset Formula $\left\Vert \mathbf{p}\left(c_{i}\right)-\mathbf{p}\left(c_{j}\right)\right\Vert <mindist$
\end_inset

 then 
\begin_inset Formula $\text{delete}\left(c_{i}\right)$
\end_inset


\end_layout

\begin_layout Standard
Contact points are 
\begin_inset Quotes eld
\end_inset

topologically adjacent
\begin_inset Quotes erd
\end_inset

 if they are generated by geometrical primitives which themselves are topologica
lly adjacent (e.g.
 finite elements that share element faces).
 We note, that parameters 
\begin_inset Formula $threshold$
\end_inset

, 
\begin_inset Formula $minarea$
\end_inset

 and 
\begin_inset Formula $mindist$
\end_inset

 can be adjusted by using the :ref:`CONTACT_SPARSIFY` input command.
\end_layout

\begin_layout Section
Broad phase contact detection
\end_layout

\begin_layout Standard
Broad phase contact detection precedes the detailed pairwise checks, one
 of which is described above.
 During the broad phase we only intend to find a likely candidates for the
 detailed pairwise overlap tests and for this reason axis aligned bounding
 boxes are used to represent geometrical primitives.
 For example, each finite element is represented by a corresponding bounding
 box, and so are spheres and ellipsoids present in a simulation.
 A number of box overlap test algorithms are implemented, as seen in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:boxtest"

\end_inset

, where a test program, implemented in tst/boxtest.c, is shown.
 All these algorithms are detailed in thesis 
\begin_inset CommandInset citation
LatexCommand cite
key "Koziara"

\end_inset

.
 The driver interface for various box overlap algorithms is implemented
 in box.c and box.h.
 The hybrid algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "Zomorodian"

\end_inset

 is currently used in Solfec-1.0 as a fixed choice, cf.
 dom.c:114.
 The AABB_Update routine (link to box.c) is called inside of the time integration
 loop in dom.c:3595.
 When box overlaps are detected the callback dom.c:overal_create is invoked,
 from within which the goc.c:gobjcontact pairwise overlap detection routined
 is called.
 Should an overlap occur, an individual contact point is created as a result,
 in dom.c:384-402.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/tomek/Dropbox/tkwork/codes/parmes/solfec/figures/boxtest.png
	lyxscale 25
	width 75text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:boxtest"

\end_inset

Box test program illustrating various box overlap detection algorithms.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Geometrical epsilon
\end_layout

\begin_layout Standard
It is important to note that GEOMETRIC_EPSILON, defined in alg.c:24, has
 significant effect on the behavior of most of the geometrical calculations
 in Solfec-1.0.
 For example, often points are regarded as coincident if they are closer
 than this value.
 The input command :ref:`GEOMETRICAL_EPSILON` allows to change the default
 value of 1E-6.
 It is recommended to use about 0.0001 to 0.01 times the dimension of a smallest
 significant geometrical feature in a model.
\end_layout

\begin_layout Section
Other implementation aspects
\end_layout

\begin_layout Standard
Test examples
\end_layout

\begin_layout Itemize
tst/cvitest.c for convex intersection implemented in cvi.c
\end_layout

\begin_layout Itemize
tst/gjktest.c for GJK proximity query implemented in gjk.c
\end_layout

\begin_layout Itemize
tst/hultest.c for convex hull calculation implemented in hul.c
\end_layout

\begin_layout Standard
can be used to improve  understanding of the pairwise overlap test described
 above.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Muller"

\end_inset

D.
 E.
 Muller and F.
 P.
 Preparata, Finding the intersection of two convex polyhedra, Theoretical
 Computer Science, 7, 217-236, 1978.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Quickhull"

\end_inset

C.
 B.
 Barber, D.
 P.
 Dobkin, and H.
 Huhdanpaa, The Quickhull Algorithm for Convex Hulls, ACM Transactions on
 Mathematical Software, 22 (4), 469-483, 1996.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "GJK"

\end_inset

E.
 G.
 Gilbert, and D.
 W.
 Johnson, and S.
 S.
 Keerthi, Fast procedure for computing the distance between complex objects
 in three-dimensional space, IEEE journal of robotics and automation, 4
 (2), 193-203, 1988.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Zomorodian"

\end_inset

A.
 Zomorodian and H.
 Edelsbrunner, Fast software for box intersections, International Journal
 of Computational Geometry and Applications, 12 (1-2), 143-172, 2002.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Koziara"

\end_inset

 `Koziara, PhD thesis, 2008.
 <http://theses.gla.ac.uk/429/>`_
\end_layout

\end_body
\end_document
